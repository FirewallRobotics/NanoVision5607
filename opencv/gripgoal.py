import cv2
import numpy
import math
from enum import Enum

class GripPipelineGoal:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__resize_image_width = 640.0
        self.__resize_image_height = 480.0
        self.__resize_image_interpolation = cv2.INTER_CUBIC

        self.resize_image_output = None

        self.__hsl_threshold_input = self.resize_image_output
        self.__hsl_threshold_hue = [61.01694915254237, 87.44680851063829]
        self.__hsl_threshold_saturation = [84.03954802259886, 255.0]
        self.__hsl_threshold_luminance = [84.03954802259886, 223.35106382978722]

        self.hsl_threshold_output = None

        self.__cv_erode_src = self.hsl_threshold_output
        self.__cv_erode_kernel = None
        self.__cv_erode_anchor = (-1, -1)
        self.__cv_erode_iterations = 1.0
        self.__cv_erode_bordertype = cv2.BORDER_CONSTANT
        self.__cv_erode_bordervalue = (-1)

        self.cv_erode_output = None

        self.__cv_dilate_src = self.cv_erode_output
        self.__cv_dilate_kernel = None
        self.__cv_dilate_anchor = (-1, -1)
        self.__cv_dilate_iterations = 21.0
        self.__cv_dilate_bordertype = cv2.BORDER_CONSTANT
        self.__cv_dilate_bordervalue = (-1)

        self.cv_dilate_output = None

        self.__find_contours_input = self.cv_dilate_output
        self.__find_contours_external_only = False

        self.find_contours_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(self.__resize_image_input, self.__resize_image_width, self.__resize_image_height, self.__resize_image_interpolation)

        # Step HSL_Threshold0:
        self.__hsl_threshold_input = self.resize_image_output
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)

        # Step CV_erode0:
        self.__cv_erode_src = self.hsl_threshold_output
        (self.cv_erode_output) = self.__cv_erode(self.__cv_erode_src, self.__cv_erode_kernel, self.__cv_erode_anchor, self.__cv_erode_iterations, self.__cv_erode_bordertype, self.__cv_erode_bordervalue)

        # Step CV_dilate0:
        self.__cv_dilate_src = self.cv_erode_output
        (self.cv_dilate_output) = self.__cv_dilate(self.__cv_dilate_src, self.__cv_dilate_kernel, self.__cv_dilate_anchor, self.__cv_dilate_iterations, self.__cv_dilate_bordertype, self.__cv_dilate_bordervalue)

        # Step Find_Contours0:
        #self.__find_contours_input = self.cv_dilate_output
        #(self.find_contours_output) = self.__find_contours(self.__find_contours_input, self.__find_contours_external_only)


    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        #width = 640
        #height = 480
        ##interpolation = cv2.INTER_CUBIC
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)

    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))

    @staticmethod
    def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        #iterations = 1

        return cv2.erode(src, kernel, anchor, iterations = (int) (iterations +0.5),
                            borderType = border_type, borderValue = border_value)

    @staticmethod
    def __cv_dilate(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of higher value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for dilation. A numpy.ndarray.
           iterations: the number of times to dilate.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after dilation.
        """
        #iterations = 15

        return cv2.dilate(src, kernel, anchor, iterations = (int) (iterations +0.5),
                            borderType = border_type, borderValue = border_value)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

######################
### Started here #####
######################

  #  def __draw_Contours():
   #     Mat drawing = Mat::zeros( gray.size(), CV_8UC3 )
    #    for( int i = 0; i< contours.size(); i+= 1)
        #Had i++ in red
     #   {
      #      Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
     #       drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
    #    }
#
 #       imshow( "Result window", drawing );
  #      waitKey(0);
    #    return 0;

     #   }


#########
def main( ):
    srcRaw = cv2.imread("goal.png", cv2.IMREAD_COLOR)
    goal = GripPipelineGoal()
    #Mat srcRaw
    goal.process(srcRaw)
    src = goal.cv_dilate_output ###Dilate
    img_erosion = cv2.erode(src, None , iterations=1) ###erode
    src = img_erosion
    #Mat gray
    img_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    src1 = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) ##CV_BGR2GRAY
    rect, src2 = cv2.threshold(src1, 200, 255, cv2.THRESH_BINARY_INV) ##Threshold the gray THRESH_BINARY_INV
    cv2.imshow("gray", src2)
    largest_area = 0
    largest_contour_index = 0
    #Rect bounding_rect
    #vector<vector<Point>> contours ## Vector for storing contour
    #vector<Vec4i> hierarchy
    #contours, = cv2.findContours( src2, contours, None, cv2.CV_RETR_CCOMP, cv2.CV_CHAIN_APPROX_SIMPLE ) ###???
    ret, thresh = cv2.threshold(src2, 150, 255, cv2.THRESH_BINARY)

    contours, hierarchy = cv2.findContours(image=src2, mode=cv2.CV_RETR_FLOODFILL, method=cv2.CHAIN_APPROX_NONE)
    ##iterate through each contour. ^^everything fine before here check underneath vvv
    i = 0
    for i in contours: ##had i++, go back through

        ## Find the area of contour
        a = cv2.contourArea(i,false)
        if(a>largest_area):
            largest_area = a
            print(f'a:{a} and largest_area{largest_area}')
            #cout<<i<<" area  "<<a<<endl;#????does it change
        ## Store the index of largest contour
            largest_contour_index = i
        ##Find the bounding rectangle for biggest contour
            bounding_rect = cv2.boundingRect(contours[i])


    color = color( 255,255,255)  ##color of the contour in the
    ##  Draw the contour and rectangle
    cv2.drawContours(src2, contours,largest_contour_index, color, cv2.CV_FILLED,8, cv2.hierarchy)
    cv2.rectangle(src2, bounding_rect,  Scalar(0,255,0),2, 8,0)
    cv2.namedWindow( "Display window", CV_WINDOW_AUTOSIZE )
    cv2.imshow( "Display window", src )
    cv2.waitKey(0)
    return 0


if __name__ == '__main__':
    main()